{"name": "test_apply_promo_code_3", "status": "broken", "statusDetails": {"message": "browsermobproxy.exceptions.ProxyServerError: Browsermob-Proxy binary couldn't be found in path provided: C:\\Program Files (x86)\\browsermob-proxy-2.1.4-bin\\bin.bat", "trace": "@pytest.fixture()\n    def send_500_response():\n>       server = Server(r\"C:\\Program Files (x86)\\browsermob-proxy-2.1.4-bin\\bin\")\n\n..\\..\\src\\fixtures\\system\\browser.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <browsermobproxy.server.Server object at 0x000001E7AD4A49B0>\npath = 'C:\\\\Program Files (x86)\\\\browsermob-proxy-2.1.4-bin\\\\bin.bat'\noptions = {}\n\n    def __init__(self, path='browsermob-proxy', options=None):\n        \"\"\"\n        Initialises a Server object\n    \n        :param str path: Path to the browsermob proxy batch file\n        :param dict options: Dictionary that can hold the port.\n            More items will be added in the future.\n            This defaults to an empty dictionary\n        \"\"\"\n        options = options if options is not None else {}\n    \n        path_var_sep = ':'\n        if platform.system() == 'Windows':\n            path_var_sep = ';'\n            if not path.endswith('.bat'):\n                path += '.bat'\n    \n        exec_not_on_path = True\n        for directory in os.environ['PATH'].split(path_var_sep):\n            if(os.path.isfile(os.path.join(directory, path))):\n                exec_not_on_path = False\n                break\n    \n        if not os.path.isfile(path) and exec_not_on_path:\n>           raise ProxyServerError(\"Browsermob-Proxy binary couldn't be found \"\n                                   \"in path provided: %s\" % path)\nE           browsermobproxy.exceptions.ProxyServerError: Browsermob-Proxy binary couldn't be found in path provided: C:\\Program Files (x86)\\browsermob-proxy-2.1.4-bin\\bin.bat\n\n..\\..\\..\\..\\miniconda3\\Lib\\site-packages\\browsermobproxy\\server.py:80: ProxyServerError"}, "attachments": [{"name": "log", "source": "9d54268e-d94d-4ff1-afb5-a3577011d2eb-attachment.txt", "type": "text/plain"}], "start": 1738167624504, "stop": 1738167624504, "uuid": "41a0af5a-396f-41e2-9d05-7790f1535fee", "historyId": "4d3e7211570903f0b6223686b47abcb9", "testCaseId": "4d3e7211570903f0b6223686b47abcb9", "fullName": "Tests.homework.final_work.TestValidate#test_apply_promo_code_3", "labels": [{"name": "feature", "value": "Full Accounts"}, {"name": "story", "value": "Waiting page load"}, {"name": "parentSuite", "value": "Tests.homework"}, {"name": "suite", "value": "final_work"}, {"name": "subSuite", "value": "TestValidate"}, {"name": "host", "value": "Admin"}, {"name": "thread", "value": "6448-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.homework.final_work"}]}