{"name": "test_apply_promo_code_3", "status": "broken", "statusDetails": {"message": "Exception: Could not read Browsermob-Proxy json\nAnother server running on this port?\njava.lang.RuntimeException: java.net.BindException: Address already in use: bind\r\n\tat org.littleshoot.proxy.impl.DefaultHttpProxyServer.doStart(DefaultHttpProxyServer.java:545)\r\n\tat org.littleshoot.proxy.impl.DefaultHttpProxyServer.start(DefaultHttpProxyServer.java:489)\r\n\tat org.littleshoot.proxy.impl.DefaultHttpProxyServer.access$700(DefaultHttpProxyServer.java:69)\r\n\tat org.littleshoot.proxy.impl.DefaultHttpProxyServer$DefaultHttpProxyServerBootstrap.start(DefaultHttpProxyServer.java:858)\r\n\tat net.lightbod...", "trace": "self = <browsermobproxy.client.Client object at 0x0000018A4C067860>\nurl = 'localhost:8080', params = {}, options = {}\n\n    def __init__(self, url, params=None, options=None):\n        \"\"\"\n        Initialises a new Client object\n    \n    \n        :param url: This is where the BrowserMob Proxy lives\n        :param params: URL query (for example httpProxy and httpsProxy vars)\n        :param options: Dictionary that can contain the port of an existing\n                        proxy to use (for example 'existing_proxy_port_to_use')\n        \"\"\"\n        params = params if params is not None else {}\n        options = options if options is not None else {}\n        self.host = \"http://\" + url\n        if params:\n            urlparams = \"?\" + unquote(urlencode(params))\n        else:\n            urlparams = \"\"\n        if 'existing_proxy_port_to_use' in options:\n            self.port = options['existing_proxy_port_to_use']\n        else:\n            resp = requests.post('%s/proxy' % self.host + urlparams)\n            content = resp.content.decode('utf-8')\n            try:\n>               jcontent = json.loads(content)\n\n..\\..\\..\\..\\miniconda3\\Lib\\site-packages\\browsermobproxy\\client.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\miniconda3\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\n..\\..\\..\\..\\miniconda3\\Lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000018A4708C830>\ns = 'java.lang.RuntimeException: java.net.BindException: Address already in use: bind\\r\\n\\tat org.littleshoot.proxy.impl.D...n\\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:873)\\r\\n\\t... 1 more\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\..\\..\\miniconda3\\Lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <final_work.TestValidate object at 0x0000018A4C066BA0>\nget_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"91007cfd5d8c88222714117e6360feba\")>\n\n    def test_apply_promo_code_3(self, get_driver):\n        server = Server(\n            r\"C:\\Program Files (x86)\\browsermob-proxy-2.1.4-bin\\browsermob-proxy-2.1.4\\bin\\browsermob-proxy.bat\")\n        server.start()\n        time.sleep(3)\n>       proxy = server.create_proxy()\n\nfinal_work.py:266: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\miniconda3\\Lib\\site-packages\\browsermobproxy\\server.py:40: in create_proxy\n    client = Client(self.url[7:], params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <browsermobproxy.client.Client object at 0x0000018A4C067860>\nurl = 'localhost:8080', params = {}, options = {}\n\n    def __init__(self, url, params=None, options=None):\n        \"\"\"\n        Initialises a new Client object\n    \n    \n        :param url: This is where the BrowserMob Proxy lives\n        :param params: URL query (for example httpProxy and httpsProxy vars)\n        :param options: Dictionary that can contain the port of an existing\n                        proxy to use (for example 'existing_proxy_port_to_use')\n        \"\"\"\n        params = params if params is not None else {}\n        options = options if options is not None else {}\n        self.host = \"http://\" + url\n        if params:\n            urlparams = \"?\" + unquote(urlencode(params))\n        else:\n            urlparams = \"\"\n        if 'existing_proxy_port_to_use' in options:\n            self.port = options['existing_proxy_port_to_use']\n        else:\n            resp = requests.post('%s/proxy' % self.host + urlparams)\n            content = resp.content.decode('utf-8')\n            try:\n                jcontent = json.loads(content)\n            except Exception as e:\n>               raise Exception(\"Could not read Browsermob-Proxy json\\n\"\n                                \"Another server running on this port?\\n%s...\" % content[:512])\nE               Exception: Could not read Browsermob-Proxy json\nE               Another server running on this port?\nE               java.lang.RuntimeException: java.net.BindException: Address already in use: bind\r\nE               \tat org.littleshoot.proxy.impl.DefaultHttpProxyServer.doStart(DefaultHttpProxyServer.java:545)\r\nE               \tat org.littleshoot.proxy.impl.DefaultHttpProxyServer.start(DefaultHttpProxyServer.java:489)\r\nE               \tat org.littleshoot.proxy.impl.DefaultHttpProxyServer.access$700(DefaultHttpProxyServer.java:69)\r\nE               \tat org.littleshoot.proxy.impl.DefaultHttpProxyServer$DefaultHttpProxyServerBootstrap.start(DefaultHttpProxyServer.java:858)\r\nE               \tat net.lightbod...\n\n..\\..\\..\\..\\miniconda3\\Lib\\site-packages\\browsermobproxy\\client.py:36: Exception"}, "attachments": [{"name": "log", "source": "c8152c73-b885-4978-b129-12c4f2555e18-attachment.txt", "type": "text/plain"}], "start": 1738771923482, "stop": 1738771926587, "uuid": "cd14ff91-ecd2-4ef5-a37c-8ca3bf074a28", "historyId": "4d3e7211570903f0b6223686b47abcb9", "testCaseId": "4d3e7211570903f0b6223686b47abcb9", "fullName": "Tests.homework.final_work.TestValidate#test_apply_promo_code_3", "labels": [{"name": "story", "value": "Waiting page load"}, {"name": "feature", "value": "Full Accounts"}, {"name": "parentSuite", "value": "Tests.homework"}, {"name": "suite", "value": "final_work"}, {"name": "subSuite", "value": "TestValidate"}, {"name": "host", "value": "Admin"}, {"name": "thread", "value": "10972-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.homework.final_work"}]}