{"name": "test_2", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=131.0.6778.205)\nStacktrace:\n\tGetHandleVerifier [0x00B3EC13+23731]\n\t(No symbol) [0x00ACC394]\n\t(No symbol) [0x009ABCD9]\n\t(No symbol) [0x009F0CB2]\n\t(No symbol) [0x009E5F57]\n\t(No symbol) [0x00A11E5C]\n\t(No symbol) [0x009E59A4]\n\t(No symbol) [0x00A120F4]\n\t(No symbol) [0x00A2B46E]\n\t(No symbol) [0x00A11BF6]\n\t(No symbol) [0x009E3F35]\n\t(No symbol) [0x009E4EBD]\n\tGetHandleVerifier [0x00E1F0D3+3039603]\n\tGetHandleVerifier [0x00E32DEA+3120778]\n\tGetHandleVerifier [0x00E2B592+3089970]\n\tGetHandleVerifier [0x00BD43B0+635984]\n\t(No symbol) [0x00AD4DCD]\n\t(No symbol) [0x00AD2068]\n\t(No symbol) [0x00AD2205]\n\t(No symbol) [0x00AC4FD0]\n\tBaseThreadInitThunk [0x774DFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77DC809E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77DC806E+238]", "trace": "self = <final_work.TestValidate object at 0x00000229F4B3EF00>\nget_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a97a74471f619d3d6277829c393b04fd\")>\n\n    def test_2(self, get_driver):\n        with allure.step('Переход на сайт https://pizzeria.skillbox.cc/'):\n            get_driver.get('https://pizzeria.skillbox.cc/')\n            time.sleep(3)\n        with allure.step('Нажать на картинку пиццы «4 в 1» в слайдере.'):\n>           get_driver.find_element(By.XPATH, '(//*[contains(@data-product_id, \"425\")])[2]').click()\n\nfinal_work.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\miniconda3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\..\\miniconda3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\miniconda3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000229F3039910>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77DC809E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77DC806E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=131.0.6778.205)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00B3EC13+23731]\nE       \t(No symbol) [0x00ACC394]\nE       \t(No symbol) [0x009ABCD9]\nE       \t(No symbol) [0x009F0CB2]\nE       \t(No symbol) [0x009E5F57]\nE       \t(No symbol) [0x00A11E5C]\nE       \t(No symbol) [0x009E59A4]\nE       \t(No symbol) [0x00A120F4]\nE       \t(No symbol) [0x00A2B46E]\nE       \t(No symbol) [0x00A11BF6]\nE       \t(No symbol) [0x009E3F35]\nE       \t(No symbol) [0x009E4EBD]\nE       \tGetHandleVerifier [0x00E1F0D3+3039603]\nE       \tGetHandleVerifier [0x00E32DEA+3120778]\nE       \tGetHandleVerifier [0x00E2B592+3089970]\nE       \tGetHandleVerifier [0x00BD43B0+635984]\nE       \t(No symbol) [0x00AD4DCD]\nE       \t(No symbol) [0x00AD2068]\nE       \t(No symbol) [0x00AD2205]\nE       \t(No symbol) [0x00AC4FD0]\nE       \tBaseThreadInitThunk [0x774DFCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77DC809E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77DC806E+238]\n\n..\\..\\..\\..\\miniconda3\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "steps": [{"name": "Переход на сайт https://pizzeria.skillbox.cc/", "status": "passed", "start": 1735899953634, "stop": 1735899963736}, {"name": "Нажать на картинку пиццы «4 в 1» в слайдере.", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=131.0.6778.205)\nStacktrace:\n\tGetHandleVerifier [0x00B3EC13+23731]\n\t(No symbol) [0x00ACC394]\n\t(No symbol) [0x009ABCD9]\n\t(No symbol) [0x009F0CB2]\n\t(No symbol) [0x009E5F57]\n\t(No symbol) [0x00A11E5C]\n\t(No symbol) [0x009E59A4]\n\t(No symbol) [0x00A120F4]\n\t(No symbol) [0x00A2B46E]\n\t(No symbol) [0x00A11BF6]\n\t(No symbol) [0x009E3F35]\n\t(No symbol) [0x009E4EBD]\n\tGetHandleVerifier [0x00E1F0D3+3039603]\n\tGetHandleVerifier [0x00E32DEA+3120778]\n\tGetHandleVerifier [0x00E2B592+3089970]\n\tGetHandleVerifier [0x00BD43B0+635984]\n\t(No symbol) [0x00AD4DCD]\n\t(No symbol) [0x00AD2068]\n\t(No symbol) [0x00AD2205]\n\t(No symbol) [0x00AC4FD0]\n\tBaseThreadInitThunk [0x774DFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77DC809E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77DC806E+238]\n\n", "trace": "  File \"C:\\Users\\Serjan777\\PycharmProjects\\pythonProject\\Tests\\homework\\final_work.py\", line 53, in test_2\n    get_driver.find_element(By.XPATH, '(//*[contains(@data-product_id, \"425\")])[2]').click()\n  File \"C:\\Users\\Serjan777\\miniconda3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\Serjan777\\miniconda3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Serjan777\\miniconda3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\Serjan777\\miniconda3\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1735899963736, "stop": 1735899963777}], "attachments": [{"name": "log", "source": "ca5e1406-f64d-4f8c-ad36-70519903da84-attachment.txt", "type": "text/plain"}], "start": 1735899953633, "stop": 1735899963790, "uuid": "f7894aae-de0b-4c01-92f3-d220147e65af", "historyId": "5092759cd33010abe1ef31a1b143ad0f", "testCaseId": "5092759cd33010abe1ef31a1b143ad0f", "fullName": "Tests.homework.final_work.TestValidate#test_2", "labels": [{"name": "feature", "value": "Full Accounts"}, {"name": "story", "value": "Waiting page load"}, {"name": "parentSuite", "value": "Tests.homework"}, {"name": "suite", "value": "final_work"}, {"name": "subSuite", "value": "TestValidate"}, {"name": "host", "value": "Admin"}, {"name": "thread", "value": "1592-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.homework.final_work"}]}