{"name": "test_apply_promo_code_3", "status": "broken", "statusDetails": {"message": "TypeError: Cannot mix str and non-str arguments", "trace": "self = <final_work.TestValidate object at 0x000002055A310770>\nget_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d11eff13f46d305b0fce7e0d324d31e1\")>\n\n    def test_apply_promo_code_3(self, get_driver):\n        with allure.step('Переход на страницу https://pizzeria.skillbox.cc/'):\n            get_driver.get('https://pizzeria.skillbox.cc/')\n            time.sleep(3)\n        with allure.step('Добавить пиццу \"Ветчина и грибы\" в \"Корзину\"'):\n            add_pizza(get_driver)\n            time.sleep(3)\n        with allure.step('Перейдите в окно оформления товаров.'):\n            get_driver.find_element(By.XPATH, '//*[@class=\"cart-contents wcmenucart-contents\"]').click()\n            time.sleep(3)\n        with allure.step('Примените промокод GIVEMEHALYAVA.'):\n            get_driver.find_element(By.CSS_SELECTOR, '#coupon_code').send_keys('GIVEMEHALYAVA')\n            time.sleep(3)\n        with allure.step('Перехватите запрос, уходящий с веба на сервер, и заблокируйте его. Вернуть ответ с ошибкой (500).'):\n            # noinspection PyTypeChecker\n>           requests.get('https://pizzeria.skillbox.cc/cart/', 500)\n\nfinal_work.py:270: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\miniconda3\\Lib\\site-packages\\requests\\api.py:73: in get\n    return request(\"get\", url, params=params, **kwargs)\n..\\..\\..\\..\\miniconda3\\Lib\\site-packages\\requests\\api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\n..\\..\\..\\..\\miniconda3\\Lib\\site-packages\\requests\\sessions.py:575: in request\n    prep = self.prepare_request(req)\n..\\..\\..\\..\\miniconda3\\Lib\\site-packages\\requests\\sessions.py:484: in prepare_request\n    p.prepare(\n..\\..\\..\\..\\miniconda3\\Lib\\site-packages\\requests\\models.py:367: in prepare\n    self.prepare_url(url, params)\n..\\..\\..\\..\\miniconda3\\Lib\\site-packages\\requests\\models.py:480: in prepare_url\n    url = requote_uri(urlunparse([scheme, netloc, path, None, query, fragment]))\n..\\..\\..\\..\\miniconda3\\Lib\\urllib\\parse.py:515: in urlunparse\n    _coerce_args(*components))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nargs = ('https', 'pizzeria.skillbox.cc', '/cart/', None, 500, None)\nstr_input = True, arg = 500\n\n    def _coerce_args(*args):\n        # Invokes decode if necessary to create str args\n        # and returns the coerced inputs along with\n        # an appropriate result coercion function\n        #   - noop for str inputs\n        #   - encoding function otherwise\n        str_input = isinstance(args[0], str)\n        for arg in args[1:]:\n            # We special-case the empty string to support the\n            # \"scheme=''\" default argument to some functions\n            if arg and isinstance(arg, str) != str_input:\n>               raise TypeError(\"Cannot mix str and non-str arguments\")\nE               TypeError: Cannot mix str and non-str arguments\n\n..\\..\\..\\..\\miniconda3\\Lib\\urllib\\parse.py:130: TypeError"}, "steps": [{"name": "Переход на страницу https://pizzeria.skillbox.cc/", "status": "passed", "start": 1737042442854, "stop": 1737042448996}, {"name": "Добавить пиццу \"Ветчина и грибы\" в \"Корзину\"", "status": "passed", "start": 1737042448996, "stop": 1737042465669}, {"name": "Перейдите в окно оформления товаров.", "status": "passed", "start": 1737042465669, "stop": 1737042469692}, {"name": "Примените промокод GIVEMEHALYAVA.", "status": "passed", "start": 1737042469692, "stop": 1737042472796}, {"name": "Перехватите запрос, уходящий с веба на сервер, и заблокируйте его. Вернуть ответ с ошибкой (500).", "status": "broken", "statusDetails": {"message": "TypeError: Cannot mix str and non-str arguments\n", "trace": "  File \"C:\\Users\\Serjan777\\PycharmProjects\\pythonProject\\Tests\\homework\\final_work.py\", line 270, in test_apply_promo_code_3\n    requests.get('https://pizzeria.skillbox.cc/cart/', 500)\n  File \"C:\\Users\\Serjan777\\miniconda3\\Lib\\site-packages\\requests\\api.py\", line 73, in get\n    return request(\"get\", url, params=params, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Serjan777\\miniconda3\\Lib\\site-packages\\requests\\api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Serjan777\\miniconda3\\Lib\\site-packages\\requests\\sessions.py\", line 575, in request\n    prep = self.prepare_request(req)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Serjan777\\miniconda3\\Lib\\site-packages\\requests\\sessions.py\", line 484, in prepare_request\n    p.prepare(\n  File \"C:\\Users\\Serjan777\\miniconda3\\Lib\\site-packages\\requests\\models.py\", line 367, in prepare\n    self.prepare_url(url, params)\n  File \"C:\\Users\\Serjan777\\miniconda3\\Lib\\site-packages\\requests\\models.py\", line 480, in prepare_url\n    url = requote_uri(urlunparse([scheme, netloc, path, None, query, fragment]))\n                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Serjan777\\miniconda3\\Lib\\urllib\\parse.py\", line 515, in urlunparse\n    _coerce_args(*components))\n    ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Serjan777\\miniconda3\\Lib\\urllib\\parse.py\", line 130, in _coerce_args\n    raise TypeError(\"Cannot mix str and non-str arguments\")\n"}, "start": 1737042472796, "stop": 1737042472800}], "attachments": [{"name": "log", "source": "fd1e25f7-caf0-4fcd-9b61-9a51e64591ec-attachment.txt", "type": "text/plain"}], "start": 1737042442853, "stop": 1737042472817, "uuid": "f2b40c7c-11db-46a7-a776-d58fe42c31e6", "historyId": "4d3e7211570903f0b6223686b47abcb9", "testCaseId": "4d3e7211570903f0b6223686b47abcb9", "fullName": "Tests.homework.final_work.TestValidate#test_apply_promo_code_3", "labels": [{"name": "feature", "value": "Full Accounts"}, {"name": "story", "value": "Waiting page load"}, {"name": "parentSuite", "value": "Tests.homework"}, {"name": "suite", "value": "final_work"}, {"name": "subSuite", "value": "TestValidate"}, {"name": "host", "value": "Admin"}, {"name": "thread", "value": "6088-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.homework.final_work"}]}