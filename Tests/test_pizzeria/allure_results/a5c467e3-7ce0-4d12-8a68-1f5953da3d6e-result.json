{"name": "test_bonus_program_2", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Заявка отправлена, дождитесь, пожалуйста, оформления карты!\nMessage: unexpected alert open: {Alert text : Заявка отправлена, дождитесь, пожалуйста, оформления карты!}\n  (Session info: chrome=132.0.6834.196)\nStacktrace:\n\tGetHandleVerifier [0x002A74A3+25091]\n\t(No symbol) [0x0022DC04]\n\t(No symbol) [0x0010B373]\n\t(No symbol) [0x0018BD54]\n\t(No symbol) [0x00171CA6]\n\t(No symbol) [0x001431D5]\n\t(No symbol) [0x0014435D]\n\tGetHandleVerifier [0x005A07C3+3142947]\n\tGetHandleVerifier [0x005B1A2B+3213195]\n\tGetHandleVerifier [0x005AC412+3191154]\n\tGetHandleVerifier [0x00348720+685184]\n\t(No symbol) [0x00236E1D]\n\t(No symbol) [0x00233E18]\n\t(No symbol) [0x00233FB6]\n\t(No symbol) [0x002266F0]\n\tBaseThreadInitThunk [0x761AFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77B6809E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77B6806E+238]\n\t(No symbol) [0x00000000]", "trace": "self = <final_work.TestValidate object at 0x00000296D29D0F20>\nget_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"d9fd5efae98ca52e59882ff54ff6a52f\")>\n\n    def test_bonus_program_2(self, get_driver):\n        with allure.step('Перейдите на страницу бонусной программы: https://pizzeria.skillbox.cc/bonus/'):\n            get_driver.get('https://pizzeria.skillbox.cc/bonus/')\n            time.sleep(3)\n        with allure.step('Ввести \"1\" в поле \"Имя\"'):\n            get_driver.find_element(By.CSS_SELECTOR, '#bonus_username').send_keys('1')\n            time.sleep(3)\n        with allure.step('Ввести +79971234567 в поле \"Телефон\"'):\n            get_driver.find_element(By.CSS_SELECTOR, '#bonus_phone').send_keys('+79971234567')\n            time.sleep(3)\n        with allure.step('Нажать \"Оформить карту\"'):\n            get_driver.find_element(By.XPATH, '//*[@style=\"cursor:pointer;\"]').click()\n            time.sleep(3)\n        with allure.step('Убедиться, что отображается надпись \"Введен неверный формат имени'):\n>           name_field = get_driver.find_element(By.XPATH, '//*[@id=\"bonus_content\"]')\n\nfinal_work.py:368: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\miniconda3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\..\\..\\miniconda3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000296D29D0D10>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"Заявка отправлена, дождитесь, пожалуйста, оформления карты!\"},\"err...jectPath [0x77B6809E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77B6806E+238]\\\\n\\\\t(No symbol) [0x00000000]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Заявка отправлена, дождитесь, пожалуйста, оформления карты!\nE           Message: unexpected alert open: {Alert text : Заявка отправлена, дождитесь, пожалуйста, оформления карты!}\nE             (Session info: chrome=132.0.6834.196)\nE           Stacktrace:\nE           \tGetHandleVerifier [0x002A74A3+25091]\nE           \t(No symbol) [0x0022DC04]\nE           \t(No symbol) [0x0010B373]\nE           \t(No symbol) [0x0018BD54]\nE           \t(No symbol) [0x00171CA6]\nE           \t(No symbol) [0x001431D5]\nE           \t(No symbol) [0x0014435D]\nE           \tGetHandleVerifier [0x005A07C3+3142947]\nE           \tGetHandleVerifier [0x005B1A2B+3213195]\nE           \tGetHandleVerifier [0x005AC412+3191154]\nE           \tGetHandleVerifier [0x00348720+685184]\nE           \t(No symbol) [0x00236E1D]\nE           \t(No symbol) [0x00233E18]\nE           \t(No symbol) [0x00233FB6]\nE           \t(No symbol) [0x002266F0]\nE           \tBaseThreadInitThunk [0x761AFCC9+25]\nE           \tRtlGetAppContainerNamedObjectPath [0x77B6809E+286]\nE           \tRtlGetAppContainerNamedObjectPath [0x77B6806E+238]\nE           \t(No symbol) [0x00000000]\n\n..\\..\\..\\..\\miniconda3\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:228: UnexpectedAlertPresentException"}, "steps": [{"name": "Перейдите на страницу бонусной программы: https://pizzeria.skillbox.cc/bonus/", "status": "passed", "start": 1739035363022, "stop": 1739035369675}, {"name": "Ввести \"1\" в поле \"Имя\"", "status": "passed", "start": 1739035369675, "stop": 1739035372751}, {"name": "Ввести +79971234567 в поле \"Телефон\"", "status": "passed", "start": 1739035372751, "stop": 1739035375827}, {"name": "Нажать \"Оформить карту\"", "status": "passed", "start": 1739035375827, "stop": 1739035378900}, {"name": "Убедиться, что отображается надпись \"Введен неверный формат имени", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Заявка отправлена, дождитесь, пожалуйста, оформления карты!\nMessage: unexpected alert open: {Alert text : Заявка отправлена, дождитесь, пожалуйста, оформления карты!}\n  (Session info: chrome=132.0.6834.196)\nStacktrace:\n\tGetHandleVerifier [0x002A74A3+25091]\n\t(No symbol) [0x0022DC04]\n\t(No symbol) [0x0010B373]\n\t(No symbol) [0x0018BD54]\n\t(No symbol) [0x00171CA6]\n\t(No symbol) [0x001431D5]\n\t(No symbol) [0x0014435D]\n\tGetHandleVerifier [0x005A07C3+3142947]\n\tGetHandleVerifier [0x005B1A2B+3213195]\n\tGetHandleVerifier [0x005AC412+3191154]\n\tGetHandleVerifier [0x00348720+685184]\n\t(No symbol) [0x00236E1D]\n\t(No symbol) [0x00233E18]\n\t(No symbol) [0x00233FB6]\n\t(No symbol) [0x002266F0]\n\tBaseThreadInitThunk [0x761AFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77B6809E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77B6806E+238]\n\t(No symbol) [0x00000000]\n\n", "trace": "  File \"C:\\Users\\Serjan777\\PycharmProjects\\pythonProject\\Tests\\homework\\final_work.py\", line 368, in test_bonus_program_2\n    name_field = get_driver.find_element(By.XPATH, '//*[@id=\"bonus_content\"]')\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Serjan777\\miniconda3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 748, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Serjan777\\miniconda3\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 354, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\Serjan777\\miniconda3\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 228, in check_response\n    raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"}, "start": 1739035378900, "stop": 1739035378908}], "attachments": [{"name": "log", "source": "3e00357c-035c-4149-a922-02438ae2fb25-attachment.txt", "type": "text/plain"}], "start": 1739035363021, "stop": 1739035378914, "uuid": "21cea1c2-4a33-4905-b891-e2c8d3aba3f6", "historyId": "5cfb9d2e4f66fcabd83823d067f8df2c", "testCaseId": "5cfb9d2e4f66fcabd83823d067f8df2c", "fullName": "Tests.homework.final_work.TestValidate#test_bonus_program_2", "labels": [{"name": "story", "value": "Waiting page load"}, {"name": "feature", "value": "Full Accounts"}, {"name": "parentSuite", "value": "Tests.homework"}, {"name": "suite", "value": "final_work"}, {"name": "subSuite", "value": "TestValidate"}, {"name": "host", "value": "Admin"}, {"name": "thread", "value": "10604-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.homework.final_work"}]}